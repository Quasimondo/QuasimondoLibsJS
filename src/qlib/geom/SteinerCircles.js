/*
* SteinerCircles (originally titled "Circle" in copyright, but class name is SteinerCircles)
*
* Copyright (c) 2013 Mario Klingemann
* 
* Permission is hereby granted, free of charge, to any person
* obtaining a copy of this software and associated documentation
* files (the "Software"), to deal in the Software without
* restriction, including without limitation the rights to use,
* copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following
* conditions:
* 
* The above copyright notice and this permission notice shall be
* included in all copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*/

// namespace:
window["qlib"] = window.qlib || {};

(function() {

/**
 * Utility class to calculate and represent a Steiner chain of circles.
 * A Steiner chain is a set of `n` circles, each tangent to two given non-intersecting circles
 * (often one containing the other, or two external to each other) and also tangent to its
 * two neighbors in the chain. This implementation uses inversion geometry to construct the chain.
 *
 * The properties of the Steiner chain are set by the `calculate` method.
 *
 * @class SteinerCircles
 * @memberof qlib
 * @constructor
 * Creates an uninitialized SteinerCircles object. Call `calculate()` to populate it.
 */
	var SteinerCircles = function() {
		/**
		 * The primary circle to which the chain is tangent.
		 * This is typically the larger, outer circle, or one of the two main circles defining the chain.
		 * @property {qlib.Circle|null} parentCircle
		 * @default null
		 */
		this.parentCircle = null;
		/**
		 * The number of circles in the Steiner chain.
		 * @property {number} circleCount
		 * @default 0
		 */
		this.circleCount = 0;
		/**
		 * A ratio factor used in the inversion process. This factor, along with `parentCircle.r` and `rotation`,
		 * implicitly defines the second circle to which the chain circles are tangent.
		 * A common setup involves one circle inside another; `ratio` helps define the inner circle's properties relative to the inversion center.
		 * @property {number} ratio
		 * @default 0
		 */
		this.ratio = 0;
		/**
		 * An array of `qlib.Circle` objects that form the Steiner chain.
		 * This array is populated by the `calculate` method. It also includes one of the two "Soddy-like" circles
		 * that are tangent to all circles in a specific configuration generated by the inversion.
		 * @property {qlib.Circle[]} circles
		 */
		this.circles = [];
		/**
		 * The center of inversion used during the calculation of the Steiner chain.
		 * Its position is determined by `parentCircle.r`, `ratio`, and `rotation`.
		 * @property {qlib.Vector2|null} inverter
		 * @protected
		 * @default null
		 */
		this.inverter = null;
		/**
		 * An auxiliary circle generated during the calculation. After transformations, this typically
		 * aligns with `parentCircle` or represents the second main circle of the configuration.
		 * @property {qlib.Circle|null} outerCircle
		 */
		this.outerCircle = null;
	}

	var p = SteinerCircles.prototype;
	
	/**
	 * Calculates the Steiner chain of circles.
	 * The method uses inversion to transform the problem into finding circles tangent to two parallel lines,
	 * then inverts them back. The properties of `this` instance (`parentCircle`, `circles`, etc.) are populated here.
	 *
	 * @method calculate
	 * @param {qlib.Circle} parentCircle - The main circle to which the chain is tangent.
	 * @param {number} circleCount - The number of circles desired in the chain (minimum 3).
	 * @param {number} ratio - A factor influencing the geometry of the second implicit circle used for inversion.
	 *                         Typically between 0 and 1, but other values can create different configurations.
	 *                         It affects the position of the center of inversion relative to `parentCircle`.
	 * @param {number} [rotation=0] - Initial rotation (in radians) of the inversion center setup around `parentCircle.c`.
	 * @param {number} [startAngle=0] - Starting angle (in radians) for placing the first circle in the chain around the inversion setup.
	 * @returns {void}
	 */
	p.calculate = function( parentCircle, circleCount, ratio, rotation, startAngle  ) 
	{
		var i;
		
		this.parentCircle = parentCircle;
		this.circleCount = Math.max(3,circleCount);
		this.ratio = ratio;
		rotation = ( rotation == null ? 0 : rotation );
		startAngle = ( startAngle == null ? 0 : startAngle );
		
		var angleStep = Math.PI / this.circleCount; // Angle for placing circles in the post-inversion parallel line setup
		var piFactor = Math.sin( angleStep );
		// centerFactor relates to the distance between the parallel lines after inversion, derived from desired circle configuration
		var centerFactor = ( 1 - piFactor) / ( 1 + piFactor );
		
		var radius = this.parentCircle.r; // Radius of the parent circle
		var a = 2 * radius; // A characteristic length, diameter of parentCircle
		var b = a * centerFactor; // Another characteristic length related to distances in inverted space
		var c = ( a - b ) / 2; // Radius of circles in the inverted space (between parallel lines)
		
		var satelitesDistance = b + c; // Distance from origin to centers of circles in inverted space
		
		this.circles = []; // Reset circles array
		
		var pointsForInversion = []; // Points that will be inverted to find centers/radii
		var angle;
		// Generate points representing circles tangent to two parallel lines in the inverted space
		for ( i = 0; i < this.circleCount; i++)
		{
			angle = 2 * angleStep*i - rotation + startAngle;
			// Each set of three points helps define a circle in the chain after inversion
			pointsForInversion.push( new qlib.Vector2( Math.cos(angle+angleStep)*satelitesDistance, Math.sin(angle+angleStep)*satelitesDistance));
			pointsForInversion.push( new qlib.Vector2( Math.cos(angle)*a, Math.sin(angle)*a)); // Points on one line
			pointsForInversion.push( new qlib.Vector2( Math.cos(angle)*b, Math.sin(angle)*b)); // Points on the other line
		}
	
		// Center of inversion: parentCircle.c is (0,0) initially for this calculation, then shifted.
		// The actual inversion center is offset from (0,0) by parentCircle.r * ratio, rotated.
		this.inverter = new qlib.Vector2( this.parentCircle.r * this.ratio * Math.cos(rotation), this.parentCircle.r * this.ratio * Math.sin(rotation) );
		
		var innerPoints = []; // Collects one set of points from inverted circles (e.g., closest to inverter)
		var outerPoints = []; // Collects another set (e.g., furthest from inverter)
		var p1_inv, p2_inv, p3_inv;
		
		for ( i = 0;  i < this.circleCount; i++)
		{
			p1_inv = this.invert( pointsForInversion[ i * 3 ] );
			p2_inv = this.invert( pointsForInversion[ i * 3 + 1 ] );
			p3_inv = this.invert( pointsForInversion[ i * 3 + 2 ] );
			
			innerPoints.push( p2_inv ); // These points help define one of the "Soddy" circles
			outerPoints.push( p3_inv ); // These points help define the other "Soddy" circle
			
			this.circles.push( qlib.CircleUtils.from3Points(p1_inv, p2_inv, p3_inv) ); // Create Steiner circle from 3 inverted points
		}
	
		// Add one of the two "Soddy" circles to the chain (the one formed by innerPoints)
		// This is a characteristic of this particular construction method.
		if (this.circleCount >= 3) { // from3Points needs 3 distinct points
			this.circles.push( qlib.CircleUtils.from3Points( innerPoints[0],  innerPoints[1],  innerPoints[2] ) );
			this.outerCircle = qlib.CircleUtils.from3Points( outerPoints[0],  outerPoints[1],  outerPoints[2] );
		} else { // Fallback for fewer than 3 circles (though constructor enforces min 3)
		    this.outerCircle = new qlib.Circle(new qlib.Vector2(), 0); // Default empty circle
		}

		if (!this.outerCircle || isNaN(this.outerCircle.r) || this.outerCircle.r === 0) {
			// In case from3Points fails (e.g. collinear points) or outerCircle is degenerate
			// This might happen if ratio or circleCount leads to a degenerate configuration.
			// To prevent division by zero, handle this case:
			// Option: skip scaling and translation, or use a default scale.
			// For now, we'll let it proceed, but a robust solution might stop or use defaults.
			// If outerCircle.r is 0, scale will be Infinity.
			if (this.outerCircle) this.outerCircle.r = this.parentCircle.r; // Avoid division by zero, assume same size as parent
			else this.outerCircle = this.parentCircle.clone();
		}

		var scale = (this.outerCircle.r === 0) ? 1 : this.parentCircle.r / this.outerCircle.r;
		var circle;
		
		// Scale and translate all calculated circles to fit into/around the parentCircle
		for ( i = 0;  i < this.circles.length; i++) 
		{
			circle = this.circles[i];
			if (!circle || !circle.c) continue; // Skip if a circle is null/invalid
			circle.c.minus( this.outerCircle.c ); // Translate to origin relative to outerCircle center
			circle.c.multiply( scale );           // Scale
			circle.r *= scale;                    // Scale radius
			circle.c.plus( this.parentCircle.c ); // Translate to final position relative to parentCircle center
		}
		
		// Adjust the outerCircle itself to match the parentCircle's properties
		if (this.outerCircle && this.outerCircle.c) {
			this.outerCircle.r *= scale;
			this.outerCircle.c.setValue( this.parentCircle.c ); // Set center to parentCircle's center
		}
	}
	
	/**
	 * Performs circular inversion of a point `p` with respect to the inversion circle
	 * centered at `this.inverter` with an implicit radius of 1 (or related to `this.parentCircle.r`
	 * depending on how `this.inverter` was scaled).
	 * Formula: P' = I + (P - I) / |P - I|^2  (for unit radius of inversion)
	 *
	 * @method invert
	 * @protected
	 * @param {qlib.Vector2} p - The point to invert.
	 * @returns {qlib.Vector2} The new inverted point.
	 */
	p.invert = function( p )
	{
		var dx = p.x - this.inverter.x;
		var dy = p.y - this.inverter.y;
		var dxy_sq = dx * dx + dy * dy ; // Squared distance from p to inverter
		if ( dxy_sq == 0 ) dxy_sq = 1 / Number.MAX_VALUE; // Avoid division by zero, effectively infinity
		// The inversion formula typically involves R^2 / |P-I|^2.
		// Here, R^2 seems to be implicitly 1. The scale of the result is handled later.
		return this.inverter.getPlus( new qlib.Vector2( dx  / dxy_sq, dy / dxy_sq) );
	}
	
	/**
	 * Draws all circles in the Steiner chain onto a canvas context.
	 * Assumes circles have a `draw` method.
	 * @method draw
	 * @param {CanvasRenderingContext2D} canvas - The canvas rendering context.
	 * @returns {void}
	 */
	p.draw = function( canvas )
	{
		for ( var i = 0;  i < this.circles.length; i++) 
		{
			if (this.circles[i] && typeof this.circles[i].draw === 'function') {
				this.circles[i].draw(canvas);
			}
		}
	}
	
	/**
	 * Returns a string representation of this SteinerCircles object.
	 * @method toString
	 * @return {string} A string representation of the instance (e.g., "SteinerCircles").
	 **/
	p.toString = function() {
		return "SteinerCircles";
	}
	
	qlib["SteinerCircles"] = SteinerCircles;
}());